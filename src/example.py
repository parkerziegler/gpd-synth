import geopandas as gpd
import os

from synthesize import lazy_synthesize, synthesize_all

from inspect import getsource
from cProfile import Profile
from io import StringIO
from contextlib import redirect_stdout

# Load our powerplants geodataframe.
ca_power_plants = gpd.read_file(
    os.path.abspath("examples/sjoin/data/ca-powerplants.geojson")
)

# Restrict our input to the synthesizer to a subset of each table.
# In this example, we just take the first 100 powerplants.
input_ca_power_plants = ca_power_plants.head(100)

# Our target output would match the output generated by actually running the target program.
target = input_ca_power_plants.dissolve(by="County")


input_gdfs = {
    "ca_power_plants": input_ca_power_plants,
}

def benchmark(src: str):
    print('benchmarking: ')
    print('\t', src)

    pr = Profile()
    pr.enable()
    # sort by total time executing in a function's body (not including sub-calls)
    pr.run(src)
    pr.disable()
    print()
    
    # don't allow benchmarking to dump in stdio
    f = StringIO()
    with redirect_stdout(f):
        pr.print_stats(sort='tottime')
    
    # truncate stdout to a dozen lines
    print('\n'.join(f.getvalue().splitlines()[:8]))


# benchmark_source can only be one line to avoid indentation issues
def benchmark_source(): assert lazy_synthesize(input_gdfs, target)
src = getsource(benchmark_source)
src = src[src.index(':') + 2:]

benchmark(src)


ca_counties = gpd.read_file(
    os.path.abspath("examples/sjoin/data/ca-counties.geojson")
)

target = gpd.sjoin(ca_counties, ca_power_plants, how="left", predicate="within")

input_gdfs = {
    'ca_counties': ca_counties,
    'ca_power_plants': ca_power_plants,
}

benchmark(src)
