import geopandas as gpd
import os
from synthesize import lazy_synthesize

from synthesize import synthesize

# Load our powerplants geodataframe.
ca_power_plants = gpd.read_file(
    os.path.abspath("examples/sjoin/data/ca-powerplants.geojson")
)

# Restrict our input to the synthesizer to a subset of each table.
# In this example, we just take the first 100 powerplants.
input_ca_power_plants = ca_power_plants.head(100)

# Our target output would match the output generated by actually running the target program.
target = input_ca_power_plants.dissolve(by="County")


input_gdfs = {
    "ca_power_plants": input_ca_power_plants,
}

def benchmark(src: str):
    from cProfile import run
    from io import StringIO
    from contextlib import redirect_stdout
    
    # don't allow benchmarking to dump in stdio
    f = StringIO()
    with redirect_stdout(f):
        # benchmark in wrapped stdout, sort by total
        # time executing in a function's body
        # (not including sub-calls)
        run(src, sort='tottime')
    
    # truncate stdout to a dozen lines
    print('\n'.join(f.getvalue().splitlines()[:12]))



# completed in ~9 secs
# benchmark('synthesize(input_gdfs, target)')
# test code:
# synthesize(input_gdfs, target)

# completed in ~0.4 secs
benchmark('lazy_synthesize(input_gdfs, target)')